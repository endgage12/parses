Что такое CRUD
CRUD обозначает создание, чтение, обновление, удаление (create, read, update,
delete) - четыре основные операции, которые обычно веб-приложения предоставляют для ресурса. Например, вы можете создать новое сообщение в блоге,
прочитать, обновить или удалить его. 

//Как залить в чужой репозиторий на Github?
1. Копируете себе локально репозиторий.
git clone url [folder]
cd [folder]
2. Создаете ветку [branch_name]
git checkout -b [branch_name]
3. Делайте изменения
4. Делаете один коммит или несколько.
git add . (если создавали новые файлы)
git commit -am "Added beautiful fixes"
5. Создаете удаленную ветку.
git push --set-upstream origin [branch_name]
В дальнейшем когда удаленная ветка создана то просто
git push
6. Создаете в интерфейсе github pull-request. Из вашей ветки в master.
7. автор или вы сами вливаете(merge)/отклоняете(decline) pull-request.
На этом этапе можно добавить комментарии или замечания к коду, что-то исправить.
8.Когда пул-реквест влили, вы локально переключаетесь в master и забираете все изменения
git checkout master
git pull

Если еще нужно что-то сделать повторяете шаги начиная со 2.

//
Route::get('адрес обращения', что вернуть при обращении)
# Route::get('/', 'ParseController@index'), при обращении к корневому файлу (index.php) произойдет вызов метода класса ParseController

?Зачем использовать замыкания в возврате?
Чтобы пройти все этапы middleware (промежуточные вещи laravel) возвращаемого значения через все middleware самого Laravel. Но использовать замыкания стоит только в небольших случаях, когда код невероятно мал и прост. Лучшее решение это использовать имя контроллера и метод, к которому он обращается

Route::get - это не статический вызов в классе Route, а фасад, созданный Laravel. Эта запись идентична записи $router->get('/', function() {});

Route::get('users/{id}/friends', function ($id) {
	//
}); 

*php интерпритатор находится в vagrant, в общей папке проекта
#Создать контроллер (через vagrant)
1) Запуск vagrant (cd ~/Homestead)
2) vagrant up
3) vagrant ssh
3*) ls -l (посмотреть директории)
4) cd code/alexandreev
php artisan make:controller UserController --resource

//чтобы перейти на url адрес сайта
0) Запустить vagrant-> в ssh-> перейти в корень сайта (ls)
1) cd code/(*названиеСайта)
2) php artisan serve -> адрес сайта

//Передача без/с аргументом в роут
Пример 3.20. Route: :view()
// Возвращает resources/views/welcome.Ыade.php
Route::view('/', 'welcome');
//Передает простые данные в Route::view()
Route: : view( '/ ', 'welcome ', [ 'User' => 'Michael']); 

#Получение ввода пользователя 
Пример Э.25. Привязка основных действий формы
// routes/web.php
Route::get('tasks/create', 'TasksController@create');
Route::post('tasks', 'TasksController@store'); 
Пример Э.26. Обычный метод ввода формы контроллера
// TasksController.php
puЬlic function store()
{
Task::create(request()->only(['title', 'description']));
return redirect('tasks');
} 
?Как узнать доступные маршруты?
artisan route:list
?Как вернуть пользователя на прежнюю страницу?
redirect()->back() 
?Как передать данные с одной страницы на другую?
redirect()->with() 
Пример 3.42. Перенаnравление с данными
Route::get('redirect-with-key-value', function () {
return redirect('dashboard')
->with('error', true);
});
Route::get('redirect-with-array', function () {
return redirect('dashboard')
});
->with(['error' => true, 'message' => 'Whoops! ']); 
4 ГЛАВА. ШАБЛОНИЗАТОР BLADE.
Условные конструкции
@if, @else, @elseif и @endif
@if (count($talks) === 1}
There is one talk at this time period.
@elseif (count($talks) === 0)
There are no talks at this time period.
@else
There are {{ count($talks) }} talks at this time period.
@endif
5 ГЛАВА. ELOQUENT БАЗЫ ДАННЫХ
Конфигурация доступа к базе данных находится в файлах config/database. php
и .env.
№Создание миграции
Запустить ее можно
командой php artisan make:migration с единственным параметром - именем миграции.
Например, чтобы создать рассмотренную таблицу, нужно ввести php artisan
make: migration create_users_ taЫe. 
